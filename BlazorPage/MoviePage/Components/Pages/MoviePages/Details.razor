@page "/movies/details"
@using Microsoft.EntityFrameworkCore
@using MyWebPage.Components
@using Microsoft.AspNetCore.Authorization

@inject IDbContextFactory<MoviePage.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]
<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Movie</h2>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movie.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@movie.Description</dd>
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@movie.ReleaseDate?.ToString("dd-MM-yyyy")</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@movie.Rate</dd>

            <!-- Wyświetlanie obrazu -->
            @if (!string.IsNullOrEmpty(movie.ImageUrl))
            {
                <dt class="col-sm-2">Image</dt>
                <dd class="col-sm-10">
                    <img src="@movie.ImageUrl" alt="Movie Image" class="img-fluid" />
                </dd>
            }
        </dl>

        <!-- Formularz do aktualizacji oceny -->
        <h3>Update Rating</h3>
        <EditForm Model="@movie" OnValidSubmit="HandleRatingUpdate" FormName="ratingForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="newRating">New Rating</label>
                <InputNumber id="newRating" @bind-Value="newRating" class="form-control" min="0" max="10" />
            </div>

            <button type="submit" class="btn btn-primary">Update Rating</button>
        </EditForm>

        <div>
            <a href="@($"/movies/edit?id={movie.Id}")">Edit</a> |
            <a href="@($"/movies")">Back to List</a>
        </div>
    }
</div>

@code {
    private Movie? movie;
    private float newRating;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        movie = await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task HandleRatingUpdate()
    {
        if (movie is not null)
        {
            movie.Rate = movie.Rate.HasValue
                ? (movie.Rate.Value + newRating) / 2
                : newRating;

            using var context = DbFactory.CreateDbContext();
            context.Movie.Update(movie);
            await context.SaveChangesAsync();

            NavigationManager.NavigateTo($"/movies/details?id={movie.Id}");
        }
    }
}
